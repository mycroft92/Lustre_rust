///Adapting grammar from VÃ©lus repo

// // Identifiers may begin with `_` or an ASCII character.


// file = { SOI ~ node_list ~ EOI }

// node_list = { node* }

// node = { "node" ~ identifier ~ "(" ~ streams_decl ~ ")" ~ "return" ~ streams_decl ~ "let" ~ var}


bool_constant = { "true" | "false" }
identifier    = @{ ("_" | ASCII_ALPHA)+ ~ ("_" | ASCII_ALPHA | ASCII_DIGIT)* }

// (* Integer constants *)
nonzero_digit        = _{ ('1'..'9') }
decimal_constant = { nonzero_digit ~ ASCII_DIGIT* }
octal_digit      = _{('0'..'7')}
octal_constant   = { "0" ~ octal_digit+}
hexadecimal_prefix   = _{ ("0x") | ("0X") }
hexadecimal_digit    = _{ ('A'..'F') | ('a'..'f') | ASCII_DIGIT }
hexadecimal_constant = { hexadecimal_prefix  ~ hexadecimal_digit+ }

//Not using these rules currently
unsigned_suffix  = _{ "u" | "U"}
long_suffix      = _{ "l" | "L"}
long_long_suffix = _{ "ll" | "LL"}
integer_suffix   = {
    (unsigned_suffix  ~ long_suffix?)
  | (unsigned_suffix  ~ long_long_suffix?)
  | (long_suffix      ~ unsigned_suffix?)
  | (long_long_suffix ~ unsigned_suffix?) }

// integer_constant = { (hexadecimal_constant ~ integer_suffix?) | (octal_constant ~ integer_suffix?) | (decimal_constant ~ integer_suffix? ) }

integer_constant = _{ (hexadecimal_constant) | (octal_constant) | (decimal_constant) }
rational_number  = {ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+}

constant         = _{ bool_constant | rational_number | integer_constant } 


// (* 6.5.2 *)
postfix_expression = { 
  (identifier ~ "(" ~ expression_list ~ ")") 
  | ("(" ~  "restart" ~ identifier ~ "every" ~ expression ~ ")" ~ "(" ~ expression_list ~")") 
  }

expression_list    = { expression ~ ( "," ~ expression)* }

unary_expression = { 
  ("#" ~ "(" ~ expression_list  ~ ")")
  | unary_operator ~ cast_expression }


unary_operator = {"-" | "~" | "!"}

binary_expression = {
  primary_expression ~ (binop ~ expression)*
}

binop = _{ FBY | GE | LE | EQ | NE | LSH | RSH | GT | LT | ARR | ADD | SUB | MUL | DIV | MOD | AND | OR | LOR | LAND | XOR | LXOR | WHEN | WHENOT | COMMA }

//ops for pratt parser
FBY  = {"fby"}
GE   = {">="}
LE   = {"<="}
EQ   = {"="}
NE   = {"<>"}
LSH  = {"<<"}
RSH  = {">>"}
GT   = {">"}
LT   = {"<"}
ARR  = {"->"}
ADD  = {"+"}
SUB  = {"-"}
MUL  = {"*"}
DIV  = {"/"}
MOD  = {"%"}
AND  = {"and"}
LAND = {"land"}
OR   = {"or"}
LOR  = {"lor"}
XOR  = {"xor"}
LXOR = {"lxor"}
WHEN = {"when"}
WHENOT = {"whenot"}
COMMA  = {","} //to have expression list at top level expression
// (* 6.5.4 *)
cast_expression = {
  ("(" ~ expression ~ ":" ~ type_name ~ ")") 

}

mrg_exp1 = _{("merge" ~ identifier ~ "(" ~ "true" ~ "->" ~ expression ~")" ~ "(" ~ "false" ~ "->" ~ expression ~")")}
mrg_exp2 = _{("merge" ~ "(" ~ identifier ~ ";" ~ expression ~ ";" ~ expression ~ ")")}
ite_exp  = _{("if" ~ expression ~ "then" ~ expression ~ "else" ~ expression)}

// (* 6.5.15/16/17, 6.6 + Lustre merge operator *)
primary_expression = { 
  mrg_exp1
  | mrg_exp2
  | ite_exp
  | cast_expression
  | unary_expression
  | postfix_expression // function calls
  | identifier
  | constant
}

expression = {primary_expression | binary_expression}

var_decl = { 
  (identifier_list ~ ":" ~ type_name ~ declared_clock) 
  | (identifier_list ~ ":" ~ type_name) }

var_decl_list = { 
  (var_decl ~ ";" ~ var_decl_list)
  | var_decl
}

local_var_decl = { "var" ~ var_decl_list ~ ";"}

identifier_list = { 
  (identifier ~ "," ~ identifier_list)
  | identifier
}

type_name = {"int8" | "uint8" | "int16" | "uint16" | "int32" | "uint32" | "int64" | "uint64" | "float32" | "float64" | "bool"}

declared_clock = {
  ("::" ~ clock)
  | ("whenot" ~ identifier)
  | ("when"   ~ identifier)
}

clock_constructor = _{
  ("onot" ~ identifier ~ clock_constructor)
  | ("on" ~ identifier ~ clock_constructor)
  | ("onot" ~ identifier)
  | ("on" ~ identifier)
}

// clock = {
//   (clock ~ "onot" ~ identifier)
//   | (clock ~ "on" ~ identifier)
//   | (".")
// }

clock = {
  (".")
  | ("." ~ clock_constructor)
}

local_decl_list = {
  (local_var_decl ~ local_decl_list)
}

parameter_list = {
  (var_decl ~ ";" ~ parameter_list)
  | var_decl
}

pattern = {
  (identifier ~ "," ~ pattern)
  | identifier
}

equation = {
  (pattern ~ "=" ~ expression ~ ";")
  | ("(" ~ pattern ~ ")" ~ "=" ~ expression ~ ";" )
}

equations = {
  ("assert" ~ expression ~ ";" ~ equations)
  | (equation ~ equations)
}

node_or_function = {
  "node" | "function"
}


declaration = {
  (node_or_function ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ ";"? 
    ~ "returns" ~ "(" ~ parameter_list ~ ")" ~ ";"? 
    ~ local_decl_list? ~ "let" ~ equations? ~ "tel" ~ ";"?)
}

translation_unit = {
  | (declaration ~ translation_unit)
  | declaration
}

file = {(SOI ~ translation_unit ~ EOI) | (SOI ~ EOI)}

