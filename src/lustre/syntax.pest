///Adapting grammar from VÃ©lus repo

// // Identifiers may begin with `_` or an ASCII character.


// file = { SOI ~ node_list ~ EOI }

// node_list = { node* }

// node = { "node" ~ identifier ~ "(" ~ streams_decl ~ ")" ~ "return" ~ streams_decl ~ "let" ~ var}


bool_constant = { "true" | "false" }
identifier    = @{ ("_" | ASCII_ALPHA)+ ~ ("_" | ASCII_ALPHA | ASCII_DIGIT)* }

// (* Integer constants *)
nonzero_digit        = _{ ('1'..'9') }
decimal_constant = { nonzero_digit ~ ASCII_DIGIT* }
octal_digit      = _{('0'..'7')}
octal_constant   = { "0" ~ octal_digit*}
hexadecimal_prefix   = _{ ("0x") | ("0X") }
hexadecimal_digit    = _{ ('A'..'F') | ('a'..'f') | ASCII_DIGIT }
hexadecimal_constant = { hexadecimal_prefix  ~ hexadecimal_digit+ }

//Not using these rules currently
unsigned_suffix  = _{ "u" | "U"}
long_suffix      = _{ "l" | "L"}
long_long_suffix = _{ "ll" | "LL"}
integer_suffix   = {
    (unsigned_suffix  ~ long_suffix?)
  | (unsigned_suffix  ~ long_long_suffix?)
  | (long_suffix      ~ unsigned_suffix?)
  | (long_long_suffix ~ unsigned_suffix?) }

// integer_constant = { (hexadecimal_constant ~ integer_suffix?) | (octal_constant ~ integer_suffix?) | (decimal_constant ~ integer_suffix? ) }

integer_constant = _{ (hexadecimal_constant) | (octal_constant) | (decimal_constant) }


constant         = _{ bool_constant | integer_constant } 

primary_expression = { identifier | constant | expression_list }


// primary_expression:
// | var=VAR_NAME
//     { [LustreAst.VARIABLE (fst var) (snd var)] }
// | cst=constant
//     { [LustreAst.CONSTANT (fst cst) (snd cst)] }
// | loc=LPAREN expr=expression_list RPAREN
//     { rev expr }

// (* 6.5.2 *)
// postfix_expression:
// | expr=primary_expression
//     { expr }
// | fn=VAR_NAME LPAREN args=expression_list RPAREN
//     { [LustreAst.APP (fst fn) (rev args) [] (snd fn)] }
// | LPAREN RESTART fn=VAR_NAME EVERY e=expression RPAREN
//   LPAREN args=expression_list RPAREN
//     { [LustreAst.APP (fst fn) (rev args) e (snd fn)] }

// (* Semantic value is in reverse order. *)
// expression_list:
// | expr=expression
//     { expr }
// | exprs=expression_list COMMA expr=expression
//     { expr ++ exprs }

// (* 6.5.3 *)
// unary_expression:
// | expr=postfix_expression
//     { expr }
// | op=unary_operator expr=cast_expression
//     { [LustreAst.UNARY (fst op) expr (snd op)] }
// | loc=HASH LPAREN args=expression_list RPAREN
//     {
//       (* Macro expand the Lustre # operator (mutual exclusion: at most
//          one of the variable number of arguments may be true). Compare
// 	 with "true" to ensure that non-bool arguments are properly
// 	 treated. Is there a prettier way to do this? *)
//       [LustreAst.BINARY
//         LustreAst.LE
//         [fold_right (fun es e => LustreAst.BINARY LustreAst.ADD [e] [es] loc)
// 	  (LustreAst.CONSTANT (LustreAst.CONST_INT LustreAst.string_zero) loc)
// 	  (map (fun e=>LustreAst.CAST LustreAst.Tbool [e] loc)
// 	   args)]
// 	[LustreAst.CONSTANT (LustreAst.CONST_INT LustreAst.string_one) loc]
// 	loc]
//     }

// unary_operator:
// | loc=MINUS
//     { (LustreAst.MINUS, loc) }
// | loc=LNOT
//     { (LustreAst.NOT, loc) }
// | loc=NOT
//     { (LustreAst.BNOT, loc) }

// (* 6.5.4 *)
// cast_expression:
// | expr=unary_expression
//     { expr }
// | LPAREN expr=cast_expression loc=COLON typ=type_name RPAREN
//     { [LustreAst.CAST (fst typ) expr loc] }

// (* Lustre fby operator *)
// fby_expression:
// | expr=cast_expression
//     { expr }
// | v0=cast_expression loc=FBY expr=fby_expression
//     { [LustreAst.FBY v0 expr loc] }

// (* 6.5.5 *)
// multiplicative_expression:
// | expr=fby_expression
//     { expr }
// | expr1=multiplicative_expression loc=STAR expr2=fby_expression
//     { [LustreAst.BINARY LustreAst.MUL expr1 expr2 loc] }
// | expr1=multiplicative_expression loc=SLASH expr2=fby_expression
//     { [LustreAst.BINARY LustreAst.DIV expr1 expr2 loc] }
// | expr1=multiplicative_expression loc=MOD expr2=fby_expression
//     { [LustreAst.BINARY LustreAst.MOD expr1 expr2 loc] }

// (* 6.5.6 *)
// additive_expression:
// | expr=multiplicative_expression
//     { expr }
// | expr1=additive_expression loc=PLUS expr2=multiplicative_expression
//     { [LustreAst.BINARY LustreAst.ADD expr1 expr2 loc] }
// | expr1=additive_expression loc=MINUS expr2=multiplicative_expression
//     { [LustreAst.BINARY LustreAst.SUB expr1 expr2 loc] }

// (* 6.5.7 *)
// shift_expression:
// | expr=additive_expression
//     { expr }
// | expr1=shift_expression loc=LSL expr2=additive_expression
//     { [LustreAst.BINARY LustreAst.LSL expr1 expr2 loc] }
// | expr1=shift_expression loc=LSR expr2=additive_expression
//     { [LustreAst.BINARY LustreAst.LSR expr1 expr2 loc] }

// (* Lustre when operators *)
// when_expression:
// | expr=shift_expression
//     { expr }
// | expr=when_expression loc=WHEN id=VAR_NAME
//     { [LustreAst.WHEN expr (fst id) true loc] }
// | expr=when_expression loc=WHEN NOT id=VAR_NAME
//     { [LustreAst.WHEN expr (fst id) false loc] }
// | expr=when_expression loc=WHENOT id=VAR_NAME
//     { [LustreAst.WHEN expr (fst id) false loc] }

// (* 6.5.8 *)
// relational_expression:
// | expr=when_expression
//     { expr }
// | expr1=relational_expression loc=LT expr2=when_expression
//     { [LustreAst.BINARY LustreAst.LT expr1 expr2 loc] }
// | expr1=relational_expression loc=GT expr2=when_expression
//     { [LustreAst.BINARY LustreAst.GT expr1 expr2 loc] }
// | expr1=relational_expression loc=LEQ expr2=when_expression
//     { [LustreAst.BINARY LustreAst.LE expr1 expr2 loc] }
// | expr1=relational_expression loc=GEQ expr2=when_expression
//     { [LustreAst.BINARY LustreAst.GE expr1 expr2 loc] }

// (* 6.5.9 *)
// equality_expression:
// | expr=relational_expression
//     { expr }
// | expr1=equality_expression loc=EQ expr2=relational_expression
//     { [LustreAst.BINARY LustreAst.EQ expr1 expr2 loc] }
// | expr1=equality_expression loc=NEQ expr2=relational_expression
//     { [LustreAst.BINARY LustreAst.NE expr1 expr2 loc] }

// (* 6.5.10 *)
// AND_expression:
// | expr=equality_expression
//     { expr }
// | expr1=AND_expression loc=AND expr2=equality_expression
//     { [LustreAst.BINARY LustreAst.BAND expr1 expr2 loc] }

// (* 6.5.11 *)
// exclusive_OR_expression:
// | expr=AND_expression
//     { expr }
// | expr1=exclusive_OR_expression loc=LXOR expr2=AND_expression
//     { [LustreAst.BINARY LustreAst.XOR expr1 expr2 loc] }
// | expr1=exclusive_OR_expression loc=XOR expr2=AND_expression
//     { [LustreAst.BINARY LustreAst.XOR expr1 expr2 loc] }

// (* 6.5.12 *)
// inclusive_OR_expression:
// | expr=exclusive_OR_expression
//     { expr }
// | expr1=inclusive_OR_expression loc=LOR expr2=exclusive_OR_expression
//     { [LustreAst.BINARY LustreAst.BOR expr1 expr2 loc] }

// (* 6.5.13 *)
// logical_AND_expression:
// | expr=inclusive_OR_expression
//     { expr }
// | expr1=logical_AND_expression loc=LAND expr2=inclusive_OR_expression
//     { [LustreAst.BINARY LustreAst.LAND expr1 expr2 loc] }

// (* 6.5.14 *)
// logical_OR_expression:
// | expr=logical_AND_expression
//     { expr }
// | expr1=logical_OR_expression loc=OR expr2=logical_AND_expression
//     { [LustreAst.BINARY LustreAst.LOR expr1 expr2 loc] }

// (* Lustre Arrow Operator *)
// arrow_expression:
// | expr=logical_OR_expression
//     { expr }
// | e0=arrow_expression loc=RARROW e1=logical_OR_expression
//     { [LustreAst.ARROW e0 e1 loc] }

// (* 6.5.15/16/17, 6.6 + Lustre merge operator *)
// expression:
// | expr=arrow_expression
//     { expr }
// | loc=IFTE expr1=expression THEN expr2=expression ELSE expr3=expression
//     { [LustreAst.IFTE expr1 expr2 expr3 loc] }
// | loc=MERGE LPAREN id=VAR_NAME SEMICOLON expr1=expression SEMICOLON expr2=expression RPAREN
//     { [LustreAst.MERGE (fst id) expr1 expr2 loc] }
// | loc=MERGE id=VAR_NAME LPAREN TRUE  RARROW expr1=expression RPAREN
// 			LPAREN FALSE RARROW expr2=expression RPAREN
//     { [LustreAst.MERGE (fst id) expr1 expr2 loc] }

// (* Declarations are much simpler than in C. We do not have arrays,
//    structs/unions, or pointers. We do not have storage-class specifiers,
//    type-qualifiers, or alignment specifiers. Nor are our type-specifiers lists
//    (e.g., "unsigned short int"), since we use the type names from
//    stdint.h/Scade (e.g., "uint_16"). *)

// var_decl:
// | ids=identifier_list loc=COLON ty=type_name clk=declared_clock
//     { map (fun id=> (id, (fst ty, clk, loc))) (rev ids) }

// var_decl_list:
// | vars=var_decl
//     { vars }
// | vars_list=var_decl_list SEMICOLON vars=var_decl
//     { vars_list ++ vars }

// local_var_decl:
// | loc=VAR vars_list=var_decl_list SEMICOLON
//     { vars_list }

// identifier_list:
// | id=VAR_NAME
//     { [fst id] }
// | idl=identifier_list COMMA id=VAR_NAME
//     { fst id :: idl }

// type_name:
// | loc=INT8
//     { (LustreAst.Tint8, loc) }
// | loc=UINT8
//     { (LustreAst.Tuint8, loc) }
// | loc=INT16
//     { (LustreAst.Tint16, loc) }
// | loc=UINT16
//     { (LustreAst.Tuint16, loc) }
// | loc=INT32
//     { (LustreAst.Tint32, loc) }
// | loc=UINT32
//     { (LustreAst.Tuint32, loc) }
// | loc=INT64
//     { (LustreAst.Tint64, loc) }
// | loc=UINT64
//     { (LustreAst.Tuint64, loc) }
// | loc=FLOAT32
//     { (LustreAst.Tfloat32, loc) }
// | loc=FLOAT64
//     { (LustreAst.Tfloat64, loc) }
// | loc=BOOL
//     { (LustreAst.Tbool, loc) }

// declared_clock:
// | /* empty */
//     { LustreAst.FULLCK LustreAst.BASE }
// | WHEN id=VAR_NAME
//     { LustreAst.WHENCK (fst id) true }
// | WHEN NOT id=VAR_NAME
//     { LustreAst.WHENCK (fst id) false }
// | WHENOT id=VAR_NAME
//     { LustreAst.WHENCK (fst id) false }
// | COLONCOLON clk=clock
//     { LustreAst.FULLCK clk }

// clock:
// | DOT
//     { LustreAst.BASE }
// | clk=clock ON id=VAR_NAME
//     { LustreAst.ON clk (fst id) true }
// | clk=clock ONOT id=VAR_NAME
//     { LustreAst.ON clk (fst id) false }

// local_decl:
// | vd=local_var_decl
//     { vd }

// local_decl_list:
// | /* empty */
//     { [] }
// | dl=local_decl_list d=local_decl
//     { d ++ dl }

// parameter_list:
// | vars=var_decl
//     { vars }
// | vars_list=parameter_list SEMICOLON vars=var_decl
//     { vars_list ++ vars }

// oparameter_list:
// | /* empty */
//     { [] }
// | vars_list=parameter_list
//     { vars_list }

// (* Semantic value is in reverse order. *)
// pattern:
// | id=VAR_NAME
//     { [fst id] }
// | pat=pattern COMMA id=VAR_NAME
//     { fst id::pat }

// equation:
// | pat=pattern loc=EQ exp=expression SEMICOLON
//     { (rev pat, exp, loc) }
// | LPAREN pat=pattern RPAREN loc=EQ exp=expression SEMICOLON
//     { (rev pat, exp, loc) }

// equations:
// | /* empty */
//     { [] }
// | eqs=equations eq=equation
//     { eq::eqs }
// | eqs=equations ASSERT expression SEMICOLON
//     { eqs (* ignore assert statements for now *) }

// optsemicolon:
// | /* empty */
//     { () }
// | SEMICOLON
//     { () }

// node_or_function:
// | loc=NODE
//     { (true, loc) }
// | loc=FUNCTION
//     { (false, loc) }

// declaration:
// | is_node=node_or_function id=VAR_NAME
//   LPAREN iparams=oparameter_list RPAREN optsemicolon
//   RETURNS LPAREN oparams=oparameter_list RPAREN optsemicolon
//   locals=local_decl_list LET eqns=equations TEL optsemicolon
//     { LustreAst.NODE
//         (fst id) (fst is_node) iparams oparams locals eqns (snd is_node) }

// translation_unit:
// | def=declaration
//     { [def] }
// | defq=translation_unit deft=declaration
//     { deft::defq }

// translation_unit_file:
// | lst=translation_unit EOF
//     { List.rev lst }
// | EOF
//     { [] }
